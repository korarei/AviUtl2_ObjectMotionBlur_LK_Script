--infomation:${SCRIPT_NAME} ${VERSION}
--label:${LABEL}
--track2:Shutter Angle,0,360,180
--track3:Sample Limit,1,4096,256,1
--track@t4:Preview Limit,0,4096,0,1
--select@s0:Extrapolation=2,None=0,Linear=1,Quadratic=2
--check@c1:Resize,1
--select@s1:Geo Cache,None=0,Full=1,Minimal=2
--select@s2:Cache Control,Off=0,Auto=1,All=2,Current=3
--track@t6:Object ID,0,15000,0,1
--track@t5:Mix,0,100,0,0.01
--check@c2:Print Information,0
--track0:X Center,-10000,10000,0,0.01
--track1:Y Center,-10000,10000,0,0.01
--value@_0:PI,{}
--[[pixelshader@motion_blur:
${SHADER_MOTION_BLUR}
]]

local function tobool(v, d)
    if (type(v) == "boolean") then
        return v
    elseif (type(v) == "number") then
        return v ~= 0
    else
        return d
    end
end

_0 = _0 or {}
local shutter_angle = tonumber(_0.shutter_angle) or obj.track2
local render_smp_lim = tonumber(_0.render_sample_limit) or obj.track3
local preview_smp_lim = tonumber(_0.preview_sample_limit) or t4 t4 = nil
local ext = tonumber(_0.extrapolation) or s0 s0 = nil
local resize = tobool(_0.resize, c1 ~= 0) c1 = nil
local geo_cache = tonumber(_0.geo_cache or s1) s1 = nil
local geo_ctrl = tonumber(_0.geo_ctrl or s2) s2 = nil
local obj_id = tonumber(_0.object_id) or t6 t6 = nil -- beta 11a
local mix = math.min(math.max(tonumber(_0.mix) or t5, 0.0), 100.0) * 0.01 t5 = nil
local print_info = tobool(_0.print_info, c2 ~= 0) c2 = nil
local cx = (tonumber(_0.cx) or obj.track0) -- beta 11a
local cy = (tonumber(_0.cy) or obj.track1) -- beta 11a
_0 = nil

local ffi = require("ffi")
pcall(ffi.cdef, [[ 
    typedef struct {
        float shutter_angle;
        int smp_lim;
        int ext;
        bool resize;
        int geo_cahce;
        int geo_ctrl;
    } Param;

    typedef struct {
        float w, h;
        float px, py;
        int obj_id, obj_idx, obj_num;
        int frame, total_frame;
        float curr[6];
        float prev[6];
        float geo[6];
    } Input;

    typedef struct {
        int margin[4];
        float init_htm[3][3];
        float drift[2];
        int smp;
    } Output;

    typedef struct {
        float ox, oy, zoom, rz;
    } Geo;

    int process_motion_blur(const Param *param, const Input *input, Output *output);
]])

---@class Param : ffi.cdata*
local Param = ffi.typeof("Param")
---@class Input : ffi.cdata*
local Input = ffi.typeof("Input")
---@class Output : ffi.cdata*
local Output = ffi.typeof("Output")

local gv = obj.getvalue

local dll_path = obj.getinfo("script_path") .. "ObjectMotionBlur_LK.dll"
local lib = ffi.load(dll_path)

local smp_lim = (preview_smp_lim == 0 or obj.getinfo("saving")) and render_smp_lim or preview_smp_lim
local w, h = obj.getpixel()
local dt = 1.0 / obj.framerate
local targets = {0, 1, "x", "y", "rz", "zoom"}

local param = Param(shutter_angle, smp_lim, ext, resize, geo_cache, geo_ctrl)

local input = Input(
    w, h,
    cx + obj.cx, cy + obj.cy,
    obj_id, obj.index, obj.num,
    obj.frame, obj.totalframe,
    {cx, cy, gv("x"), gv("y"), gv("rz"), gv("zoom")},
    {0.0, 0.0, 0.0, 0.0, 0.0, 100.0},
    {obj.cx, obj.cy, obj.ox, obj.oy, obj.rz, obj.zoom}
)

if (ext > 0 and obj.frame == 0) then
    if (ext == 1) then
        for i = 0, 5 do
            local t = targets[i + 1]
            input.prev[i] = gv(t, 0) * 2.0 - gv(t, dt)
        end
    elseif (ext == 2) then
        local t2 = dt * 2.0
        for i = 0, 5 do
            local t = targets[i + 1]
            input.prev[i] = gv(t, 0) * 3.0 - gv(t, dt) * 3.0 + gv(t, t2)
        end
    else
        ffi.copy(input.prev, input.curr, ffi.sizeof("float") * 6)
    end
elseif (obj.frame ~= 0) then
    local prev = obj.time - dt
    for i = 0, 5 do
        input.prev[i] = gv(targets[i + 1], prev)
    end
end

local output = Output()
local state = lib.process_motion_blur(param, input, output)

if (state == 0) then
    local htm = output.init_htm
    local drift = output.drift
    local add = output.margin

    obj.effect("領域拡張", "上", add[0], "下", add[1], "左", add[2], "右", add[3])
    obj.cx = obj.cx + (add[2] - add[3]) * 0.5 -- beta 11a
    obj.cy = obj.cy + (add[0] - add[1]) * 0.5 -- beta 11a

    local w_new = w + add[2] + add[3]
    local h_new = h + add[0] + add[1]

    obj.pixelshader("motion_blur", "object", "object", {
        htm[0][0], htm[0][1], htm[0][2], 0.0,
        htm[1][0], htm[1][1], htm[1][2], 0.0,
        htm[2][0], htm[2][1], htm[2][2], 0.0,
        drift[0], drift[1],
        w_new, h_new,
        w_new * 0.5 + cx + obj.cx, h_new * 0.5 + cy + obj.cy,
        output.smp,
        mix
    })
elseif (state == -1) then
    error("Failed to apply motion blur.")
end

if (print_info) then
    debug_print(string.format([[[INFO]
        Object ID       : %d
        Index           : %d
        Required Samples: %d
    ]], obj_id, obj.index, output.smp))
end
